{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","constants.js","containers/App.js","actions.js","serviceWorkerRegistration.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","overflowX","border","height","maxWwidth","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","dispatch","useDispatch","searchField","useSelector","searchRobots","requestRobots","isPending","isFailed","useState","onRequestRobots","fetch","then","response","json","data","payload","catch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","event","text","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialSearchState","initialRobotsState","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c437d5a6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots,id }) => {\r\nconsole.log('CardList')\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user,i ) => {\r\n          return (\r\n            <Card\r\n              key={id}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  console.log('SearchBox')\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='input'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflowY: 'scroll',overflowX: 'hidden', border: '5px solid black', height: '800px', maxWwidth: '100%'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state= {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error,info){\r\n\t\tthis.setState({ error:true})\r\n\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>looks like thergie's an error</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\r\n\t}\r\n\t\r\n\t\t\r\n}\r\n\r\nexport default ErrorBoundry","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state= {\r\n\t\t\tcount: 0\r\n\t\t}\r\n\t}\r\n\r\n\tshouldComponentUpdate(nextProps, nextState){\r\n\t\tif(this.state.count !== nextState.count) {\r\n\t\t\treturn true\r\n\t\t} else {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\t\t// updateCount =() => {\r\n\t\t// \tthis.setState({\r\n\t\t// \t\tcount: this.state.count + 1\r\n\t\t// \t})\r\n\t\t// }\r\n\r\n\r\n\t\tupdateCount =() => {               // change state this way to reduce side efects\r\n\t\t\tthis.setState (state => {\r\n\t\t\treturn{\tcount: this.state.count + 1}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\r\n\trender(){\r\n\t\tconsole.log('Header')\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t<button color = {this.props.color} onClick = {this.updateCount} >\r\n\t\t\tcount: {this.state.count}\r\n\t\t\t</button>\r\n\t\t\t </div> )\r\n\t\t\t}\r\n\t\t\t}\r\n\r\nexport default CounterButton","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n\r\n\tshouldComponentUpdate(nextProps, nextState){\r\n\t\treturn false;\r\n\t}\r\n\trender(){\r\n\t\tconsole.log('Header')\r\n\t\treturn(\r\n\t\t\t<div>\r\n\r\n\t\t\t <h1 className='f1'>RoboFriends</h1>\r\n\t\t\t <CounterButton color ={'red'}/>\r\n\t\t\t </div>\r\n\r\n\t\t\t)\r\n\t}\r\n}\r\nexport default Header","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { useState, useEffect } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Header from '../components/Header';\r\n\r\nimport './App.css';\r\n//import {connect} from 'react-redux'; import connect whn using classes\r\nimport { useDispatch, useSelector } from 'react-redux' // only with redux hooks\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\n\r\n\r\n// const mapStateToProps = state => { // Applying state with redux classes\r\n//   return{\r\n//     searchField: state.searchRobots.searchField,\r\n     \r\n//       robots: state.requestRobots.robots,\r\n//        isPending: state.requestRobots.isPending,\r\n//       error: state.requestRobots.error\r\n//     }\r\n// }\r\n\r\n\r\n\r\nconst App = () => {\r\n    const dispatch = useDispatch() \r\n    const { searchField } = useSelector((state) => state.searchRobots) // applying state with redux hooks\r\n    const {robots, isPending, isFailed}=  useSelector((state) => state.requestRobots )\r\n\r\n    \r\n  // class App extends Component{  // applying state with classes\r\n  // constructor() { // class\r\n  //   super()\r\n  //   this.state = {\r\n  //     robots: [],\r\n  //     searchfield: ''\r\n  //   }\r\n  // }\r\n\r\n  // const [robots, setRobots] = useState([]) // applying states with hooks  \r\n   //const [searchfield, setSearchfield] = useState('') \r\n  const [count, setCount]= useState(0)\r\n\r\n   // componentDidMount() { // class function runs when compenent loads\r\n  //   fetch('https://jsonplaceholder.typicode.com/users')\r\n  //     .then(response=> response.json())\r\n  //     .then(users => {this.setState({ robots: users})});\r\n  // }\r\n\r\n  // const mapDispatchToProps = (dispatch) =>{ // redux class function applies dispatch function to below class functions to fetch\r\n//   return {\r\n//   onSearchChange: (event)=> dispatch(setSearchField(event.target.value)),\r\n//   onRequestRobots: () =>  dispatch(requestRobots())\r\n//   } \r\n// }\r\n\r\n  const onRequestRobots = () =>{ //  redux hook function fetches the  funtion with dispatch \r\n    dispatch(requestRobots())  \r\n  }\r\n\r\n  useEffect(()=>{ //  hook function loads when component loads \r\n     onRequestRobots()\r\n      },[]) // empty array ensures function only runs once  when called.\r\n\r\n  //  componentDidMount() {  redux class function runs when component loads \r\n  //   this.props.onRequestRobots()\r\n  // }\r\n\r\n   useEffect(()=>{\r\n      console.log(count)\r\n       },[count]) // appying count state in array ensures funtion runs when state changes\r\n\r\nconst onSearchChange = (event) => { // search change funtion with hooks redux\r\n  dispatch(setSearchField( event.target.value ))\r\n  }\r\n\r\n\r\n  // const onSearchChange = (event) => { // hooks onsearhhangefunction \r\n  // setSearchfield( event.target.value )\r\n  // }\r\n\r\n // const {searchField, onSearchChange, robots, isPending} = this.props; // assigning with redux classes\r\nconst filteredRobots = robots.filter(robot =>{\r\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n      \r\n\r\n   return (\r\n      <div className='tc'>\r\n        <Header />\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n          { isPending ? <h1>Loading</h1> :\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          }\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\nexport default App;\r\n//export default connect(mapStateToProps, mapDispatchToProps)(App); // how to export using redux classed and how to \r\n// connect redux funtions to app ","\r\nimport {CHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n\t} from './constants.js'\r\n\r\n\r\n\r\nexport const setSearchField = (text)=>({\r\n\t\r\n\t type: CHANGE_SEARCH_FIELD,\r\n\t payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING})\r\n\t  fetch('https://jsonplaceholder.typicode.com/users')\r\n       .then(response=> response.json())\r\n       .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n       .catch(error=> dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {CHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n\t} from './constants.js'\r\n\r\nconst initialSearchState = {\r\n\tsearchField: ''\r\n}\r\n\r\n\r\nexport const searchRobots = (state= initialSearchState, action= {})=> {\r\n\tswitch(action.type){\r\n\t case CHANGE_SEARCH_FIELD:\r\n\t   return Object.assign({}, state, { searchField: action.payload })\r\n\t default: \r\n\t\treturn state\r\n }\r\n} \r\n\r\nconst initialRobotsState = {\r\n\tisPending: true,\r\n\trobots: [],\r\n\tisFailed: ''\r\n}\r\n\r\n\texport const requestRobots = (state = initialRobotsState, action = {})=>{\r\n\t\tswitch(action.type){\r\n\t\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\t\treturn Object.assign({}, state, {isPending:true})\r\n\t\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false})\r\n\t\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\t    return Object.assign({}, state, { isFailed: action.payload, isPending: false })\r\n\t\t\t default: \r\n\t\t\t  \treturn state;\r\n\t\t\t  }\r\n\t\t\t} \r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {searchRobots, requestRobots, } from './reducers';\r\nimport 'tachyons'; \r\n\r\n \r\n\r\n\r\nconst logger = createLogger()\r\n\r\nconst rootReducer = combineReducers({searchRobots,requestRobots })\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nReactDOM.render( <Provider store ={store}>\r\n\t\t\t\r\n\t\t\t\t<App />\r\n\t\t\t\t\r\n\t\t\t\t</Provider>, document.getElementById('root'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}